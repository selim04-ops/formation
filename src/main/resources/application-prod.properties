spring.application.name=formation
server.port=${SERVER_PORT:8080}  # fallback to 8080 if not set

# Swagger / API docs
springdoc.api-docs.enabled=${SPRINGDOC_API_DOCS_ENABLED:true}
springdoc.swagger-ui.enabled=${SPRINGDOC_SWAGGER_UI_ENABLED:true}
cors.allowed.origin=${ALLOWED_ORIGIN}
# Database config
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:true}
spring.jpa.database-platform=${SPRING_JPA_DATABASE_PLATFORM:org.hibernate.dialect.PostgreSQLDialect}

# Static file handling
spring.web.resources.static-locations=${SPRING_WEB_RESOURCES_STATIC_LOCATIONS:classpath:/static/,file:${user.dir}/uploads/}

# HikariCP config
spring.datasource.hikari.minimum-idle=${SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE:5}
spring.datasource.hikari.maximum-pool-size=${SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE:10}
#spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.connection-timeout=${SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT:30000}
spring.datasource.hikari.idle-timeout=${SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT:600000}
spring.datasource.hikari.max-lifetime=${SPRING_DATASOURCE_HIKARI_MAX_LIFETIME:1800000}

# Logging
logging.level.org.springframework.security=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY:DEBUG}
logging.level.org.springframework.web=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB:TRACE}
logging.level.org.springframework.security.oauth2=${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY_OAUTH2:TRACE}
logging.level.com.esprit.formation.config.OAuth2LoginSuccessHandler=${LOGGING_LEVEL_COM_ESPRIT_FORMATION_CONFIG_OAUTH2LOGINSUCCESSHANDLER:DEBUG}

# Google OAuth2
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=${GOOGLE_SCOPE}
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI}
spring.security.oauth2.client.provider.google.authorization-uri=${GOOGLE_AUTH_URI}
spring.security.oauth2.client.provider.google.token-uri=${GOOGLE_TOKEN_URI}
spring.security.oauth2.client.provider.google.user-info-uri=${GOOGLE_USER_INFO_URI}

# Facebook OAuth2
spring.security.oauth2.client.registration.facebook.client-id=${FACEBOOK_CLIENT_ID}
spring.security.oauth2.client.registration.facebook.client-secret=${FACEBOOK_CLIENT_SECRET}
spring.security.oauth2.client.registration.facebook.scope=${FACEBOOK_SCOPE}
spring.security.oauth2.client.registration.facebook.redirect-uri=${FACEBOOK_REDIRECT_URI}

# JWT config
jwt.secret-key=${JWT_SECRET_KEY}
jwt.expiration-ms=${JWT_EXPIRATION_MS}

# Mail config
spring.mail.host=${SPRING_MAIL_HOST}
spring.mail.port=${SPRING_MAIL_PORT}
spring.mail.username=${SPRING_MAIL_USERNAME}
spring.mail.password=${SPRING_MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=${SPRING_MAIL_SMTP_AUTH}
spring.mail.properties.mail.smtp.starttls.enable=${SPRING_MAIL_STARTTLS}
spring.mail.properties.mail.debug=${SPRING_MAIL_DEBUG}

# Stripe config
stripe.secret.key=${STRIPE_SECRET_KEY}
stripe.public.key=${STRIPE_PUBLIC_KEY}

# Hugging Face
huggingface.api.key=${HUGGINGFACE_API_KEY}
huggingface.api.url=${HUGGINGFACE_API_URL}
